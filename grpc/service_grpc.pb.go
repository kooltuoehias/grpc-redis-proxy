// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedisProxyClient is the client API for RedisProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisProxyClient interface {
	Get(ctx context.Context, in *RedisRequest, opts ...grpc.CallOption) (*RedisReply, error)
	Set(ctx context.Context, in *RedisSetRequest, opts ...grpc.CallOption) (*RedisReply, error)
}

type redisProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisProxyClient(cc grpc.ClientConnInterface) RedisProxyClient {
	return &redisProxyClient{cc}
}

func (c *redisProxyClient) Get(ctx context.Context, in *RedisRequest, opts ...grpc.CallOption) (*RedisReply, error) {
	out := new(RedisReply)
	err := c.cc.Invoke(ctx, "/RedisProxy/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisProxyClient) Set(ctx context.Context, in *RedisSetRequest, opts ...grpc.CallOption) (*RedisReply, error) {
	out := new(RedisReply)
	err := c.cc.Invoke(ctx, "/RedisProxy/set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisProxyServer is the server API for RedisProxy service.
// All implementations must embed UnimplementedRedisProxyServer
// for forward compatibility
type RedisProxyServer interface {
	Get(context.Context, *RedisRequest) (*RedisReply, error)
	Set(context.Context, *RedisSetRequest) (*RedisReply, error)
	mustEmbedUnimplementedRedisProxyServer()
}

// UnimplementedRedisProxyServer must be embedded to have forward compatible implementations.
type UnimplementedRedisProxyServer struct {
}

func (UnimplementedRedisProxyServer) Get(context.Context, *RedisRequest) (*RedisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRedisProxyServer) Set(context.Context, *RedisSetRequest) (*RedisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRedisProxyServer) mustEmbedUnimplementedRedisProxyServer() {}

// UnsafeRedisProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisProxyServer will
// result in compilation errors.
type UnsafeRedisProxyServer interface {
	mustEmbedUnimplementedRedisProxyServer()
}

func RegisterRedisProxyServer(s grpc.ServiceRegistrar, srv RedisProxyServer) {
	s.RegisterService(&RedisProxy_ServiceDesc, srv)
}

func _RedisProxy_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisProxyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RedisProxy/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisProxyServer).Get(ctx, req.(*RedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisProxy_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisProxyServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RedisProxy/set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisProxyServer).Set(ctx, req.(*RedisSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisProxy_ServiceDesc is the grpc.ServiceDesc for RedisProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RedisProxy",
	HandlerType: (*RedisProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _RedisProxy_Get_Handler,
		},
		{
			MethodName: "set",
			Handler:    _RedisProxy_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
